---
title: "SAFE STREETS"
format: html
editor: visual
---

##Data Source: 

The study leverages data from the General Social Survey (GSS), conducted by the University of Chicago’s NORC. The GSS is a critical source of data, capturing perceptions of safety among Americans when walking alone at night. It encompasses a broad range of demographic factors, including gender, race, health, and age, providing a comprehensive dataset from 1970 to 2022.

##Analytical Tools and Libraries:

To analyze and interpret the GSS data, the research employs the R programming language, as updated by the R Core Team in 2024. The analysis is enriched through the use of several R libraries, each contributing unique functionalities:

###ggplot2 (Wickham, 2016) for creating elegant data visualizations.

###tidyverse (Wickham et al., 2019) for a cohesive collection of data manipulation tools.

###readr (Wickham, Hester, and Bryan, 2022) for importing rectangular data formats.

###here (Müller, 2020) for simplifying file path specification.

###Tidyr (Wickham, Vaughan, and Girlich, 2024) for tidying messy datasets.

###Readxl (Wickham and Bryan, 2023) for reading Excel files.

###Arrow (Richardson et al., 2024) for integrating with ‘Apache Arrow’.

The data is meticulously downloaded from the GSS NORC website, focusing on specific variables of interest. The R language and its associated libraries facilitate the visualization and comprehension of the data, allowing for a more profound communication of the findings to the audience.

##Data Cleaning

The data cleaning process involved multiple steps to prepare the survey data from individual Excel files. First, the read_excel function from the readr package was used to import each data file. Data tidying involved selecting relevant rows (slice) and potentially renaming column headers.

Next, the data was reshaped from a wide format (years as columns) to a long format (years as rows) using t() and as.data.frame(). Cleaning steps addressed unwanted characters like newline characters (\\n) with sapply and gsub. In some cases, values containing additional information were separated using str_split_fixed. Finally, irrelevant columns were removed with select, and column names were adjusted using names(). These data cleaning steps were repeated for each survey file (Gender, Health, Age, and Race) with minor adjustments based on the specific data structure. The cleaned data frames were then saved as Parquet files (.parquet) using the write_parquet function for efficient storage and further analysis. Fortunately the data was already organized into easy to comprehend variable names, so there was no need to rename any of the variable names in the data cleaning process.

Survey Methodology ~~Methods and Considerations~~:

The General Social Survey (GSS) is a cornerstone of social science research in the United States. For nearly five decades, beginning in 1972, the GSS primarily employed in-person interviews to collect data. This traditional method offered a distinct advantage: the face-to-face interaction allowed interviewers to delve deeper into responses and clarify any ambiguities. This approach ensured rich and nuanced data collection. However, with the arrival of the COVID-19 pandemic, the GSS pivoted to online surveys from 2020 to 2021, demonstrating its adaptability in the face of unforeseen circumstances.

The GSS targets a broad range of participants, focusing on English and Spanish-speaking adults over 18 residing within the US. This inclusive approach fosters a diverse pool of respondents, contributing to the comprehensiveness of the survey's findings. However, it is important to acknowledge that the GSS does exclude certain groups. Individuals who do not meet the language criteria or are unable to participate due to health limitations are not included in the survey's scope.

The GSS methodology is not without its potential limitations. Changes in how participants are selected, including adjustments to the Kish grid method, could inadvertently skew the representation of specific demographic groups. Additionally, the shift to online surveys raises concerns about the potential underrepresentation of older adults who may be less comfortable with technology. This is a significant consideration, as moving to an online survey method might also lead to underrepresentation of older individuals, who may not be as digitally literate. This shift is significant as it could impact the responses among older adults, resulting in their underrepresentation.

Statistical Analysis Methodology

 The paper uses a time series analysis to communicate the narrowing gap in the perceived fear between the different groups interviewed. The time series analysis is a powerful tool because it communicates change through time in a truly accessible way. 

To get a better understanding of the overall trend for Americans' perceived sense of safety walking alone at night, we examine the relationship Americans have to perceived safety walking along at night based on multiple different groups. The groups examined are Gender Identity (Male or Female), Racial Identity (Black, While, or Other), Age Group (18-34, 35-49, 50-64, and 65+), Health Condition (Good Health, Fair Health, and Poor Health). Based on these metrics we can examine and verify if the media’s claims and narrative is accurate to the way real Americans feel towards safety walking alone at night.

```{r}
#| echo: false
#| warning: false
#| message: false

#1    GGPlot for GunLaw (the total of all Americans in survey)
fear <- read_parquet("data/analysis_data/fear.parquet")
View(fear)

transform(fear, 'Total Americans in Favour' = as.numeric('Total Americans in Favour')) 

is.numeric(fear$Total.Americans.in.Favour) ## test



names(fear) <- c("Year", "Total")

ggplot(data=fear, aes(x = Year, y = Total, group = 1)) +
  geom_line()+
  labs(title = "Percentage of feeling unsafe walking alone at night", y = "Total % of Americans in fear walking alone at night")

```

```{r}
#| echo: false
#| warning: false
#| message: false


#2    GGPlot for Gender
## load in parquet ##
Gender <- read_parquet("data/analysis_data/Gender.parquet")

View(Gender)
# View the first few rows of the dataset
head(Gender)

# Convert the 'Female' and 'Male' columns to numeric using dplyr for better readability and efficiency
Gender <- Gender %>%
  mutate(Female = as.numeric(Female),
         Male = as.numeric(Male))

# Check if the columns are numeric
is.numeric(Gender$Female) # Should return TRUE
is.numeric(Gender$Male)   # Should return TRUE


####Make 2 columns side by side into two values in one column one above the other (turn data into long format)
Gender <- Gender |> 
  pivot_longer(cols=c('Female', 'Male'), names_to='Gender', values_to='Total')
###### MAKE THE PLOT #######
ggplot(data=Gender, aes(x = Year, y=Total, group = Gender)) +
  geom_line(aes(colour=Gender))+
  labs(title = "Percentage of American Women vs Men \n who feel unsafe outside at night", y = "Total percent of those in fear")




```

```{r}
#| echo: false
#| warning: false
#| message: false

#3    GGPlot for Health ////////////////////// Not Currently Working


# Read the data
Health <- read_parquet("data/analysis_data/Health.parquet")

# View the first few rows of the dataset
head(Health)

# Convert the health category columns to numeric and include tests to check the conversion
Health <- Health %>%
  mutate(
    Excellent = as.numeric(Excellent),
    Good = as.numeric(Good),
    Fair = as.numeric(Fair),
    Poor = as.numeric(Poor)
  ) %>%
  # Include tests after the transformation
  mutate(
    Excellent_is_numeric = is.numeric(Excellent),
    Good_is_numeric = is.numeric(Good),
    Fair_is_numeric = is.numeric(Fair),
    Poor_is_numeric = is.numeric(Poor)
  )

# Check the results of the tests
print(Health$Excellent_is_numeric) # test
print(Health$Good_is_numeric)      # test
print(Health$Fair_is_numeric)      # test
print(Health$Poor_is_numeric)      # test

# Remove the test columns before plotting
Health <- Health %>%
  select(-c(Excellent_is_numeric, Good_is_numeric, Fair_is_numeric, Poor_is_numeric))

# Pivot the data to long format
Health_long <- Health %>%
  pivot_longer(
    cols = c(Excellent, Good, Fair, Poor),
    names_to = "Healthy",
    values_to = "Total"
  )

# Create the ggplot
ggplot(data = Health_long, aes(x = Year, y = Total, group = Healthy)) +
  geom_line(aes(colour = Healthy)) +
  labs(title = "Percentage of Americans who fear walking alone at night based on their physical health",
       y = "% of population") +
  theme_minimal()



```

```{r}
#| echo: false
#| warning: false
#| message: false


#4    GGPlot for Age

# Read the data
Age <- read_parquet("data/analysis_data/Age.parquet")

# View the first few rows of the dataset
head(Age)

# Convert the age group columns to numeric and include tests to check the conversion
Age <- Age %>%
  mutate(
    `18-34` = as.numeric(`18-34`),
    `35-49` = as.numeric(`35-49`),
    `50-64` = as.numeric(`50-64`),
    `65+` = as.numeric(`65+`)
  ) %>%
  # Include tests after the transformation
  mutate(
    `18-34_is_numeric` = is.numeric(`18-34`),
    `35-49_is_numeric` = is.numeric(`35-49`),
    `50-64_is_numeric` = is.numeric(`50-64`),
    `65+_is_numeric` = is.numeric(`65+`)
  )

# Check the results of the tests
print(Age$`18-34_is_numeric`) # Test
print(Age$`35-49_is_numeric`) # Test
print(Age$`50-64_is_numeric`) # Test
print(Age$`65+_is_numeric`)   # Test

# Remove the test columns before plotting
Age <- Age %>%
  select(-c(`18-34_is_numeric`, `35-49_is_numeric`, `50-64_is_numeric`, `65+_is_numeric`))

# Pivot the data to long format
Age_long <- Age %>%
  pivot_longer(
    cols = c(`18-34`, `35-49`, `50-64`, `65+`),
    names_to = "Age_Group",
    values_to = "Total"
  )

# Create the ggplot
ggplot(data = Age_long, aes(x = Year, y = Total, group = Age_Group)) +
  geom_line(aes(colour = Age_Group)) +
  labs(title = "Americans in favour of police backed gun permits based on age group",
       y = "Total % in favour") +
  theme_minimal()


```

```{r}

#5    GGPlot for Race

# Read the data
Race <- read_parquet("data/analysis_data/Race.parquet")

# View the first few rows of the dataset
head(Race)

# Convert the race category columns to numeric and include tests to check the conversion
Race <- Race %>%
  mutate(
    White = as.numeric(White),
    Black = as.numeric(Black),
    Other = as.numeric(Other)
  ) %>%
  # Include tests after the transformation
  mutate(
    White_is_numeric = is.numeric(White),
    Black_is_numeric = is.numeric(Black),
    Other_is_numeric = is.numeric(Other)
  )

# Check the results of the tests
print(Race$White_is_numeric) # Test
print(Race$Black_is_numeric) # Test
print(Race$Other_is_numeric) # Test

# Remove the test columns before plotting
Race <- Race %>%
  select(-c(White_is_numeric, Black_is_numeric, Other_is_numeric))

# Pivot the data to long format
Race_long <- Race %>%
  pivot_longer(
    cols = c(White, Black, Other),
    names_to = "Race",
    values_to = "Total"
  )

# Create the ggplot
ggplot(data = Race_long, aes(x = Year, y = Total, group = Race)) +
  geom_line(aes(colour = Race)) +
  labs(title = "Americans' feeling of safety walking at night based on racial identity",
       y = "Total % feeling safe") +
  theme_minimal()


```
